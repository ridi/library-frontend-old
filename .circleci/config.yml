version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.9
commands:
  install:
    description: Install Dependencies
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
jobs:
  build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/library-frontend
    parameters:
      env:
        type: string
        default: production
    steps:
      - checkout
      - install
      - run:
          name: Build next.js application
          command: NODE_ENV=<<parameters.env>> yarn build
          environment:
            SENTRY_RELEASE_VERSION: ${CIRCLE_SHA1}
      - run:
          name: Export outputs
          command: NODE_ENV=<<parameters.env>> yarn export
      - persist_to_workspace:
          root: .
          paths:
            - out
  deploy:
    docker:
      - image: circleci/python
    working_directory: ~/library-frontend
    parameters:
      dev:
        type: boolean
        default: false
      stage:
        type: boolean
        default: false
      prod:
        type: boolean
        default: false
    environment:
      S3_BUCKET_DEV: s3://ridi-library-dev
      S3_BUCKET_PROD: s3://ridi-library-prod
      S3_RELEASE_PARAMS: "--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate"
      S3_ASSETS_PARAMS: "--cache-control public,max-age=31536000"
    steps:
      - attach_workspace:
          at: .
      - when:
          condition: <<parameters.dev>>
          steps:
            - aws-s3/sync:
                from: out
                to: ${S3_BUCKET_DEV}
                aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
                aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
                arguments: ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: ${S3_BUCKET_DEV}/index.html
                to: ${S3_BUCKET_DEV}/index.html
                aws-access-key-id: DEV_AWS_ACCESS_KEY_ID
                aws-secret-access-key: DEV_AWS_SECRET_ACCESS_KEY
                arguments: ${S3_RELEASE_PARAMS}
      - when:
          condition: <<parameters.stage>>
          steps:
            - aws-s3/sync:
                from: out
                to: ${S3_BUCKET_PROD}
                arguments: --exclude "index.html" --exclude "*.map" ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: out/index.html
                to: ${S3_BUCKET_PROD}/staging.html
                arguments: ${S3_RELEASE_PARAMS}
      - when:
          condition: <<parameters.prod>>
          steps:
            - aws-s3/sync:
                from: out
                to: ${S3_BUCKET_PROD}
                arguments: --exclude "*.map" ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: ${S3_BUCKET_PROD}/index.html
                to: ${S3_BUCKET_PROD}/index.html
                arguments: ${S3_RELEASE_PARAMS}
workflows:
  version: 2
  deploy-dev:
    jobs:
      - build:
          name: build-dev
          filters: &master_only
            branches:
              only:
                - master
                - add-circle-ci
          env: development
      - deploy:
          name: deploy-dev
          requires:
            - build-dev
          filters: *master_only
          dev: true
  deploy-stage:
    jobs:
      - build:
          name: build-stage
          filters: *master_only
          env: staging
      - deploy:
          name: deploy-stage
          requires:
            - build-stage
          filters: *master_only
          stage: true
  deploy-prod:
    jobs:
      - build:
          name: build-prod
          filters: &release_only
            branches:
              only: release
      - deploy:
          name: deploy-prod
          requires:
            - build-prod
          filters: *release_only
          prod: true
