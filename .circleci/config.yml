version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.9
  slack: circleci/slack@2.5.1
commands:
  install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
  sentry_upload:
    steps:
      - run:
          command: curl -sL https://sentry.io/get-cli/ | bash
      - run:
          command: |
            sentry-cli releases new ${CIRCLE_SHA1}
            sentry-cli releases files ${CIRCLE_SHA1} upload-sourcemaps out/
            sentry-cli releases finalize ${CIRCLE_SHA1}
          environment:
            SENTRY_LOG_LEVEL: debug
jobs:
  build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/library-frontend
    parameters:
      env:
        type: string
        default: production
    steps:
      - checkout
      - install
      - run:
          name: Build next.js application
          environment:
            SENTRY_RELEASE_VERSION: ${CIRCLE_SHA1}
            NODE_ENV: <<parameters.env>>
          command: |
            yarn build
            yarn export
      - persist_to_workspace:
          root: .
          paths:
            - out
  deploy:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/library-frontend
    parameters:
      dev:
        type: boolean
        default: false
      stage:
        type: boolean
        default: false
      prod:
        type: boolean
        default: false
    environment:
      S3_RELEASE_PARAMS: '--metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate'
      S3_ASSETS_PARAMS: '--cache-control public,max-age=31536000'
      AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - when:
          condition: <<parameters.dev>>
          steps:
            # debug
            - run:
                name: Install AWS CLI
                command: |
                  export PIP=$(which pip pip3 | head -1)
                  if [[ -n $PIP ]]; then
                    if which sudo > /dev/null; then
                      sudo $PIP install awscli --upgrade
                    else
                      # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
                      $PIP install awscli --upgrade --user
                    fi
                  elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
                    cd
                    curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
                    unzip awscli-bundle.zip
                    if which sudo > /dev/null; then
                      sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
                    else
                      # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
                      awscli-bundle/install -b ~/bin/aws
                    fi
                    rm -rf awscli-bundle*
                    cd -
                  else
                    echo "Unable to install AWS CLI. Please install pip."
                    exit 1
                  fi
            - run:
                name: Configure AWS Access Key ID
                command: |
                  aws configure set aws_access_key_id \
                  $DEV_AWS_ACCESS_KEY_ID \
                  --profile default
            - run:
                name: Configure AWS Secret Access Key
                command: |
                  aws configure set aws_secret_access_key \
                  $DEV_AWS_SECRET_ACCESS_KEY \
                  --profile default
            - run:
                name: Configure AWS default region
                command: |
                  aws configure set region $AWS_REGION \
                  --profile default
            - run:
                name: Debugging 1
                command: |
                  aws sts get-caller-identity
            - run:
                name: Debugging 1 (--debug)
                command: |
                  aws sts get-caller-identity --debug
            - run:
                name: Debugging 2
                command: |
                  aws s3 ls s3://ridi-select-dev
                  aws s3 ls s3://ridi-library-dev
            # debug
            - aws-s3/sync:
                from: out
                to: ${S3_BUCKET_DEV}
                arguments: ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: ${S3_BUCKET_DEV}/index.html
                to: ${S3_BUCKET_DEV}/index.html
                arguments: ${S3_RELEASE_PARAMS}
            - run:
                name: Set environment variables
                command: |
                  echo "export COMMIT_MESSAGE=$(git show -s --format=%s -n1 ${CIRCLE_SHA1})" >> $BASH_ENV
            - slack/notify:
                color: good
                message: $COMMIT_MESSAGE
                webhook: $SLACK_WEBHOOK_DEV
      - when:
          condition: <<parameters.stage>>
          steps:
            - aws-s3/sync:
                from: out
                to: ${S3_BUCKET_PROD}/staging/
                arguments: --exclude "*.map" ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: ${S3_BUCKET_PROD}/staging/index.html
                to: ${S3_BUCKET_PROD}/staging/index.html
                arguments: ${S3_RELEASE_PARAMS}
      - when:
          condition: <<parameters.prod>>
          steps:
            - aws-s3/sync:
                from: out
                to: ${S3_BUCKET_PROD}
                arguments: --exclude "*.map" ${S3_ASSETS_PARAMS}
            - aws-s3/copy:
                from: ${S3_BUCKET_PROD}/index.html
                to: ${S3_BUCKET_PROD}/index.html
                arguments: ${S3_RELEASE_PARAMS}
            - sentry_upload
            - run:
                name: Set environment variables
                command: |
                  echo "export COMMIT_MESSAGE=$(git show -s --format=%s -n1 ${CIRCLE_SHA1})" >> $BASH_ENV
            - slack/notify:
                color: good
                message: $COMMIT_MESSAGE
                include_project_field: false
                include_job_number_field: false
workflows:
  version: 2
  deploy-dev:
    jobs:
      - build:
          name: build-dev
          filters: &master_only
            branches:
              only:
                - master
                - /circleci\/.*/
          env: development
      - deploy:
          name: deploy-dev
          requires:
            - build-dev
          filters: *master_only
          dev: true
  deploy-stage:
    jobs:
      - build:
          name: build-stage
          filters: *master_only
          env: staging
      - deploy:
          name: deploy-stage
          requires:
            - build-stage
          filters: *master_only
          stage: true
  deploy-prod:
    jobs:
      - build:
          name: build-prod
          filters: &release_only
            branches:
              only: release
      - deploy:
          name: deploy-prod
          requires:
            - build-prod
          filters: *release_only
          prod: true
